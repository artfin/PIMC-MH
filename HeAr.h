#include <math.h>

double V_HeAr(double R); // bohr -> Hartree
double dV_HeAr(double R); // bohr -> Hartree
double dip_HeAr(double R); // bohr -> dipole a.u.

#ifdef HEAR_IMPLEMENTATION

double dip_HeAr(double R)
{
    return exp(0.47293181 - 0.40100613 * R - 0.10292726 * R * R) -148.55391 * pow(R, -7);
}

double ddip_HeAr(double R)
{
    return (-0.40100613e0 - 0.20585452e0 * R) * exp(0.47293181e0 - 0.40100613e0 * R - 0.10292726e0 * pow(R, 0.2e1)) + 0.103987737e4 * pow(R, -0.8e1); 
}

double V_HeAr(double R)
{
    double t2, t5, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t25, t26, t27, t28,
        t37, t38, t39, t40, t48, t49, t50, t51, t59, t60, t61, t62, t71, t73, t80;

    t2 = R * R;
    t5 = exp(-0.163051044e1 * R - 0.4680016e-1 * t2);
    t7 = 0.16274792500000e1 * R;
    t8 = exp(-t7);
    t9 = 0.13243443545903e1 * t2;
    t10 = t2 * R;
    t11 = 0.71844765231677e0 * t10;
    t12 = t2 * t2;
    t13 = 0.29231466158919e0 * t12;
    t14 = t12 * R;
    t15 = 0.95147209241436e-1 * t14;
    t16 = t12 * t2;
    t17 = 0.25808351455974e-1 * t16;
    t25 = t12 * t10;
    t26 = 0.60003652101865e-2 * t25;
    t27 = t12 * t12;
    t28 = 0.12206837340001e-2 * t27;
    t37 = 0.22073749421084e-3 * t27 * R;
    t38 = t27 * t2;
    t39 = 0.35924569152514e-4 * t38;
    t40 = 0.1e1 + t7 + t9 + t11 + t13 + t15 + t17 + t26 + t28 + t37 + t39;
    t48 = 0.53151355328098e-5 * t27 * t10;
    t49 = t27 * t12;
    t50 = 0.72085606588213e-6 * t49;
    t51 = 0.1e1 + t7 + t9 + t11 + t13 + t15 + t17 + t26 + t28 + t37 + t39 + t48 + t50;
    t59 = 0.90244483804600e-7 * t27 * t14;
    t60 = t27 * t16;
    t61 = 0.10490787487068e-7 * t60;
    t62 = 0.1e1 + t7 + t9 + t11 + t13 + t15 + t17 + t26 + t28 + t37 + t39 + t48 + t50 + t59 + t61;
    t71 = t27 * t27;
    t73 = 0.1e1 + t7 + t9 + t11 + t13 + t15 + t17 + t26 + t28 + t37 + t39 + t48 + t50 + t59 + t61 + 0.11382359300908e-8 * t27 * t25 + 0.11577845986420e-9 * t71;
    t80 = 0.2303058634e2 * t5 - 0.940835513e1 * (0.1e1 - 0.1e1 * t8 * (0.1e1 + t7 + t9 + t11 + t13 + t15 + t17)) / t16 - 0.165523018e3 * (0.1e1 - 0.1e1 * t8 * (0.1e1 + t7 + t9 + t11 + t13 + t15 + t17 + t26 + t28)) / t27 - 0.379715796e4 * (0.1e1 - 0.1e1 * t8 * t40) / t38 - 0.1165179999e6 * (0.1e1 - 0.1e1 * t8 * t51) / t49 - 0.466258000e7 * (0.1e1 - 0.1e1 * t8 * t62) / t60 - 0.236861000e9 * (0.1e1 - 0.1e1 * t8 * t73) / t71;

    return t80;
}

double dV_HeAr(double R)
{
    double t1, t3, t5, t7, t9, t12, t18, t19, t20, t27, t32, t37, t38, t70, t75;
    t1 = R * R;
    t3 = t1 * t1;
    t5 = t3 * t1;
    t7 = t3 * t3;
    t9 = t7 * t1;
    t12 = exp(-0.16274792500000e1 * R);
    t18 = exp(-0.40000000000000e-7 * R * (0.40762761e8 + 0.1170004e7 * R));
    t19 = t7 * t7;
    t20 = t19 * R;
    t27 = t1 * R;
    t32 = t3 * R;
    t37 = -0.65276120000000e21 * t1 - 0.13982159988000e20 * t3 - 0.37971579600000e18 * t5 - 0.13241841440000e17 * t7 - 0.56450130780000e15 * t9 + 0.37897760000000e23 * t12 + 0.37551611466691e15 * t18 * t20 + 0.61677818021480e23 * t12 * R + 0.50842445707618e23 * t12 * t1 + 0.28289912008269e23 * t12 * t27 + 0.11956533659492e23 * t12 * t3 + 0.40975965274158e22 * t12 * t32 + 0.11877872891918e22 * t12 * t5;
    t38 = t3 * t27;
    t70 = -0.37897760000000e23 + 0.30017223672567e21 * t12 * t38 + 0.67711176330861e20 * t12 * t7 + 0.13906982420029e20 * t12 * t7 * R + 0.26482299316268e19 * t12 * t9 + 0.47597985110546e18 * t12 * t7 * t27 + 0.82255007548410e17 * t12 * t7 * t3 + 0.13919887346146e17 * t12 * t7 * t32 + 0.23407022926629e16 * t12 * t7 * t5 + 0.39334588708829e15 * t12 * t7 * t38 + 0.65688923130369e14 * t12 * t19 + 0.12069498412857e14 * t12 * t20 + 0.21556702512116e14 * t18 * t19 * t1;
    t75 = -0.10000000000000e-12 * (t37 + t70) / t20;

    return t75;
}

#endif // HEAR_IMPLEMENTATION

